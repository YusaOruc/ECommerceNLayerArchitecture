// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20211129093619_deleted_contactTable-in")]
    partial class deleted_contactTablein
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AddressID1")
                        .HasColumnType("int");

                    b.Property<string>("AddressUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("AddressID1");

                    b.HasIndex("UserID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.BasketProduct", b =>
                {
                    b.Property<int>("BasketProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BasketProductImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BasketProductNumber")
                        .HasColumnType("int");

                    b.Property<double>("BasketProductPrice")
                        .HasColumnType("float");

                    b.Property<string>("BasketProductTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelectedBasketProductID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BasketProductID");

                    b.HasIndex("UserID");

                    b.ToTable("BasketProducts");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContactComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.FavProduct", b =>
                {
                    b.Property<int>("FavProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SelectedFavProductID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FavProductID");

                    b.HasIndex("UserID");

                    b.ToTable("FavProducts");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<bool>("OrderStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ProductNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("AddressID");

                    b.HasIndex("ProductID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImg1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImg2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImg3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Slider", b =>
                {
                    b.Property<int>("SliderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SliderDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderImg")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderID");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("UserMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersUserID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Address", b =>
                {
                    b.HasOne("EntityLayer.Concreate.EntityFramework.Address", null)
                        .WithMany("Addresses")
                        .HasForeignKey("AddressID1");

                    b.HasOne("EntityLayer.Concreate.EntityFramework.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.BasketProduct", b =>
                {
                    b.HasOne("EntityLayer.Concreate.EntityFramework.User", "User")
                        .WithMany("BasketProducts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.FavProduct", b =>
                {
                    b.HasOne("EntityLayer.Concreate.EntityFramework.User", "User")
                        .WithMany("FavProducts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Order", b =>
                {
                    b.HasOne("EntityLayer.Concreate.EntityFramework.Address", "Addresses")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concreate.EntityFramework.Product", "Products")
                        .WithMany("Orders")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Product", b =>
                {
                    b.HasOne("EntityLayer.Concreate.EntityFramework.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.User", b =>
                {
                    b.HasOne("EntityLayer.Concreate.EntityFramework.Order", null)
                        .WithMany("Users")
                        .HasForeignKey("OrderID");

                    b.HasOne("EntityLayer.Concreate.EntityFramework.User", "Users")
                        .WithMany()
                        .HasForeignKey("UsersUserID");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Address", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Order", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EntityLayer.Concreate.EntityFramework.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BasketProducts");

                    b.Navigation("FavProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
